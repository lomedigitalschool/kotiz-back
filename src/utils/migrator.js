/**
 * üîÑ Migrator - Syst√®me de migration automatique
 * 
 * Ce module ex√©cute automatiquement les migrations de base de donn√©es au d√©marrage.
 * Il maintient un suivi des migrations ex√©cut√©es pour √©viter les doublons.
 * 
 * Fonctionnalit√©s:
 * - Cr√©ation automatique de la table SequelizeMeta
 * - Ex√©cution s√©quentielle des migrations
 * - Suivi des migrations d√©j√† appliqu√©es
 */

const { Sequelize } = require('sequelize');
const sequelize = require('../config/database');

/**
 * Ex√©cute toutes les migrations en attente
 * @returns {Promise<void>}
 */
async function runMigrations() {
  try {
    console.log('üîÑ Ex√©cution automatique des migrations...');
    
    // Cr√©ation de la table de suivi des migrations (si elle n'existe pas)
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS "SequelizeMeta" (
        name VARCHAR(255) NOT NULL PRIMARY KEY
      );
    `);
    
    // Liste ordonn√©e de toutes les migrations √† ex√©cuter
    const migrations = [
      { name: '001-create-users', ...require('../migrations/001-create-users') },
      { name: '002-create-payment-methods', ...require('../migrations/002-create-payment-methods') },
      { name: '003-create-pulls', ...require('../migrations/003-create-pulls') },
      { name: '004-create-contributions', ...require('../migrations/004-create-contributions') },
      { name: '005-create-transactions', ...require('../migrations/005-create-transactions') },
      { name: '006-create-user-payment-methods', ...require('../migrations/006-create-user-payment-methods') },
      { name: '007-create-notifications', ...require('../migrations/007-create-notifications') },
      { name: '008-create-logs', ...require('../migrations/008-create-logs') },
      { name: '009-create-kyc', ...require('../migrations/009-create-kyc') },
      { name: '010-seed-payment-methods', ...require('../migrations/010-seed-payment-methods') }
    ];
    
    // R√©cup√©ration des migrations d√©j√† ex√©cut√©es
    const [executedMigrations] = await sequelize.query('SELECT name FROM "SequelizeMeta"');
    const executedNames = executedMigrations.map(m => m.name);
    
    // Ex√©cution des migrations non encore appliqu√©es
    for (const migration of migrations) {
      if (!executedNames.includes(migration.name)) {
        console.log(`üìã Migration: ${migration.name}`);
        
        // Ex√©cution de la migration
        await migration.up(sequelize.getQueryInterface(), Sequelize);
        
        // Enregistrement dans la table de suivi
        await sequelize.query('INSERT INTO "SequelizeMeta" (name) VALUES (?)', { replacements: [migration.name] });
        
        console.log(`‚úÖ ${migration.name} termin√©e`);
      }
    }
    
    console.log('‚úÖ Toutes les migrations ont √©t√© ex√©cut√©es avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des migrations:', error);
    throw error;  // Propager l'erreur pour arr√™ter le d√©marrage
  }
}

module.exports = { runMigrations };