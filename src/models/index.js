/**
 * üîó Index des mod√®les - Configuration des relations Sequelize
 * 
 * Ce fichier centralise tous les mod√®les et d√©finit leurs relations.
 * Il exporte une instance configur√©e de tous les mod√®les avec leurs associations.
 * 
 * Architecture relationnelle:
 * - User (1:N) Cagnotte, Contribution, Notification, UserPaymentMethod, Log
 * - User (1:1) Kyc
 * - Cagnotte (1:N) Contribution
 * - Contribution (1:1) Transaction
 * - PaymentMethod (1:N) UserPaymentMethod, Transaction
 */

// Import de la connexion √† la base de donn√©es
const sequelize = require('../config/database');

// Import de tous les mod√®les
const User = require('./User');
const Cagnotte = require('./Cagnotte');
const Contribution = require('./Contribution');
const Transaction = require('./Transaction');
const Notification = require('./Notification');
const UserPaymentMethod = require('./UserPaymentMethod');
const PaymentMethod = require('./PaymentMethod');
const Log = require('./Log');
const Kyc = require('./Kyc');


// ====================
// üîó D√©finition des associations entre mod√®les
// ====================

// --- Relations User (utilisateur central du syst√®me) ---
User.hasMany(Cagnotte, { foreignKey: 'userId' });              // Un utilisateur peut cr√©er plusieurs cagnottes
User.hasMany(Contribution, { foreignKey: 'userId' });          // Un utilisateur peut faire plusieurs contributions
User.hasMany(Notification, { foreignKey: 'userId' });          // Un utilisateur re√ßoit plusieurs notifications
User.hasMany(UserPaymentMethod, { foreignKey: 'userId' });     // Un utilisateur a plusieurs m√©thodes de paiement
User.hasMany(Log, { foreignKey: 'userId' });                   // Un utilisateur g√©n√®re plusieurs logs
User.hasOne(Kyc, { foreignKey: 'userId' });                    // Un utilisateur a un seul dossier KYC

// --- Relations Cagnotte (collectes de fonds) ---
Cagnotte.belongsTo(User, { as: 'owner', foreignKey: 'userId' }); // Chaque cagnotte a un propri√©taire
Cagnotte.hasMany(Contribution, { foreignKey: 'cagnotteId' });    // Une cagnotte re√ßoit plusieurs contributions

// --- Relations Contribution (dons financiers) ---
Contribution.belongsTo(Cagnotte, { foreignKey: 'cagnotteId' });           // Chaque contribution appartient √† une cagnotte
Contribution.belongsTo(User, { foreignKey: 'userId', allowNull: true });    // Contribution peut √™tre anonyme (userId null)
Contribution.hasOne(Transaction, { foreignKey: 'contributionId' });         // Chaque contribution a une transaction

// --- Relations Transaction (paiements) ---
Transaction.belongsTo(Contribution, { foreignKey: 'contributionId' });    // Chaque transaction est li√©e √† une contribution
Transaction.belongsTo(PaymentMethod, { foreignKey: 'paymentMethodId' });   // Chaque transaction utilise une m√©thode de paiement

// --- Relations UserPaymentMethod (liaison utilisateur-paiement) ---
UserPaymentMethod.belongsTo(User, { foreignKey: 'userId' });                    // Association appartient √† un utilisateur
UserPaymentMethod.belongsTo(PaymentMethod, { foreignKey: 'paymentMethodId' });   // Association utilise une m√©thode
PaymentMethod.hasMany(UserPaymentMethod, { foreignKey: 'paymentMethodId' });     // Une m√©thode peut √™tre utilis√©e par plusieurs utilisateurs

// --- Relations Notification (syst√®me de messages) ---
Notification.belongsTo(User, { foreignKey: 'userId' });  // Chaque notification est destin√©e √† un utilisateur

// --- Relations Log (audit et tra√ßabilit√©) ---
Log.belongsTo(User, { foreignKey: 'userId' });  // Chaque log est associ√© √† un utilisateur

// --- Relations KYC (v√©rification d'identit√©) ---
Kyc.belongsTo(User, { as: 'utilisateur', foreignKey: 'userId' });  // Chaque dossier KYC appartient √† un utilisateur

// --- Relations PaymentMethod (m√©thodes de paiement) ---
PaymentMethod.hasMany(UserPaymentMethod, { foreignKey: 'paymentMethodId' }); // Une m√©thode peut √™tre associ√©e √† plusieurs utilisateurs
PaymentMethod.hasMany(Transaction, { foreignKey: 'paymentMethodId' });       // Une m√©thode peut traiter plusieurs transactions

// ====================
// üì§ Export de tous les mod√®les configur√©s
// ====================
module.exports = {
  sequelize,
  User,
  Cagnotte,
  Contribution,
  Transaction,
  Notification,
  UserPaymentMethod,
  PaymentMethod,
  Log,
  Kyc
};
